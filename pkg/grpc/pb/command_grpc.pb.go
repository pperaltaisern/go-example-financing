// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.0
// source: api/command.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommandsClient is the client API for Commands service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommandsClient interface {
	SellInvoice(ctx context.Context, in *SellInvoiceCommand, opts ...grpc.CallOption) (*UUID, error)
	BidOnInvoice(ctx context.Context, in *BidOnInvoiceCommand, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ApproveFinancing(ctx context.Context, in *ApproveFinancingCommand, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReverseFinancing(ctx context.Context, in *ReverseFinancingCommand, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type commandsClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandsClient(cc grpc.ClientConnInterface) CommandsClient {
	return &commandsClient{cc}
}

func (c *commandsClient) SellInvoice(ctx context.Context, in *SellInvoiceCommand, opts ...grpc.CallOption) (*UUID, error) {
	out := new(UUID)
	err := c.cc.Invoke(ctx, "/Commands/SellInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandsClient) BidOnInvoice(ctx context.Context, in *BidOnInvoiceCommand, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Commands/BidOnInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandsClient) ApproveFinancing(ctx context.Context, in *ApproveFinancingCommand, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Commands/ApproveFinancing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandsClient) ReverseFinancing(ctx context.Context, in *ReverseFinancingCommand, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Commands/ReverseFinancing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommandsServer is the server API for Commands service.
// All implementations must embed UnimplementedCommandsServer
// for forward compatibility
type CommandsServer interface {
	SellInvoice(context.Context, *SellInvoiceCommand) (*UUID, error)
	BidOnInvoice(context.Context, *BidOnInvoiceCommand) (*emptypb.Empty, error)
	ApproveFinancing(context.Context, *ApproveFinancingCommand) (*emptypb.Empty, error)
	ReverseFinancing(context.Context, *ReverseFinancingCommand) (*emptypb.Empty, error)
	mustEmbedUnimplementedCommandsServer()
}

// UnimplementedCommandsServer must be embedded to have forward compatible implementations.
type UnimplementedCommandsServer struct {
}

func (UnimplementedCommandsServer) SellInvoice(context.Context, *SellInvoiceCommand) (*UUID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellInvoice not implemented")
}
func (UnimplementedCommandsServer) BidOnInvoice(context.Context, *BidOnInvoiceCommand) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BidOnInvoice not implemented")
}
func (UnimplementedCommandsServer) ApproveFinancing(context.Context, *ApproveFinancingCommand) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveFinancing not implemented")
}
func (UnimplementedCommandsServer) ReverseFinancing(context.Context, *ReverseFinancingCommand) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReverseFinancing not implemented")
}
func (UnimplementedCommandsServer) mustEmbedUnimplementedCommandsServer() {}

// UnsafeCommandsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandsServer will
// result in compilation errors.
type UnsafeCommandsServer interface {
	mustEmbedUnimplementedCommandsServer()
}

func RegisterCommandsServer(s grpc.ServiceRegistrar, srv CommandsServer) {
	s.RegisterService(&Commands_ServiceDesc, srv)
}

func _Commands_SellInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellInvoiceCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandsServer).SellInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Commands/SellInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandsServer).SellInvoice(ctx, req.(*SellInvoiceCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commands_BidOnInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BidOnInvoiceCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandsServer).BidOnInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Commands/BidOnInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandsServer).BidOnInvoice(ctx, req.(*BidOnInvoiceCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commands_ApproveFinancing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveFinancingCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandsServer).ApproveFinancing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Commands/ApproveFinancing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandsServer).ApproveFinancing(ctx, req.(*ApproveFinancingCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commands_ReverseFinancing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReverseFinancingCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandsServer).ReverseFinancing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Commands/ReverseFinancing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandsServer).ReverseFinancing(ctx, req.(*ReverseFinancingCommand))
	}
	return interceptor(ctx, in, info, handler)
}

// Commands_ServiceDesc is the grpc.ServiceDesc for Commands service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Commands_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Commands",
	HandlerType: (*CommandsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SellInvoice",
			Handler:    _Commands_SellInvoice_Handler,
		},
		{
			MethodName: "BidOnInvoice",
			Handler:    _Commands_BidOnInvoice_Handler,
		},
		{
			MethodName: "ApproveFinancing",
			Handler:    _Commands_ApproveFinancing_Handler,
		},
		{
			MethodName: "ReverseFinancing",
			Handler:    _Commands_ReverseFinancing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/command.proto",
}
